// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require bootstrap
//= require moment
//=	require underscore
//=	require calendar
//= require wickedpicker
//= require foundation-datepicker
//=	require clndr-rails
//= require jquery_ujs
//= require turbolinks

// document.ready
$(document).ready(ready);
// for turbolink load
$(document).on('page:load', ready);

function ready() {
	passwordConfirm();
	filename();
	timePicker();
	navHamburger();
	removeButtonDataTarget();
	navHamburgerToggle();
	ajaxForms();
	flashMessage();
	eventGuestBoxes();
	attendanceLabelListeners();
	buttonAttendanceLabelListener();
	categorySelector();
	itemSelector();
	notificationBoxAction();
	dismissListener();
	inviteButtonListener();
	guestCheckboxListener();
	inviteCheckboxListener();
	removeFromListIconListener();
	searchBorderListener();
	searchedFriendClickListener();
	submitInvites();
	if(window.location.pathname === "/calendar") {
		calendar();
	}
}

function passwordConfirm() {
	var $passConfirm = $(".password-confirm");
	var $passOne = $('.pass-first');
	var $passTwo = $('.pass-second');
	var noMatch = '<i class="fa fa-times-circle pass-nomatch" aria-hidden="true"></i>';
	var match = '<i class="fa fa-check-circle pass-match" aria-hidden="true"></i>'
	var $passContainer = $(".pass-match-container");
	var $registerButton = $(".submit.register");
	var $username = $("#signup-username");
	if($passConfirm.length > 0) {
		$(".input-container").on('input', '.password-confirm', function(e) {
			if ($passOne.val() === $passTwo.val() && ($passOne.length > 0)) {
				$passContainer.html(match);
				if($username.val().length > 0) {
					$registerButton.show("fast");
				}
			} else {
				$registerButton.hide("fast");
				$passContainer.html(noMatch);
			}
		})
	}
}

function filename() {
	$("#user_avi").on("change", function(e) {
		var filePath = $(this).val();
		var split = filePath.split("\\");
		var filename = split[split.length - 1];
		$("#filename").empty();
		$("#filename").append(filename);
	});
}

function timePicker() {
	if($('.timepicker')) {
		$('.timepicker').wickedpicker();
	}
}

function navHamburger() {
	$(window).resize(function() {
		removeButtonDataTarget();
	})
}

function navHamburgerToggle() {
	var el = $('#bs-example-navbar-collapse-1');
	$('body').on('click', 'button.navbar-toggle', function() {
		if(el.height() < 25) {
			el.css({
				height: "0px",
			    display: "block",
			    "overflow-y": "visible"
			});
			el.animate({
			    height: "26px"
			}, 200);
		} else {
			el.css({
				"overflow-y": 'hidden'
			});
			el.animate({
			    height: "0px"
			}, 200, null, function() {
				el.css({
					"display": 'none'
				});
			});
		}
	})
}

function removeButtonDataTarget() {
	// Fetch an array of all the data
	var el = $("button.navbar-toggle");
	var data = el.data(),
	    i;
	// Fetch all the key-names
	var keys = $.map(data , function(value, key) { return key; });
	// Loop through the keys, remove the attribute if the key contains "lorem".
	for(i = 0; i < keys.length; i++) {
	    if (keys[i].indexOf('target') != -1) {
	        el.removeAttr("data-" + keys[i]);
	    }
	}
}

function ajaxForms() {
	// use addEventComment for when you want to dynamically add comments. for now page reloads on success
	// addEventComment();
}

function addEventComment() {
	if($("form#add_comment")) {
		$("form#add_comment").on('submit', function(e) {
			e.preventDefault();
			var eventId = $("#event_id").val();
			var data = {
				comments: { 
					post: $("#comment_post").val(),
					id: eventId
				}
			};
			var url = "/events/" + eventId + "/comments/";
			$.ajax({
			  type: "POST",
			  url: url,
			  data: data,
			  success: success,
			  error: error
			});
		});

		function success(res) {
			// for now just reload page
			location.reload();
		}

		function error (res) {
			console.log(res, "ERROR");
		}
	}
}

function flashMessage() {
	var el = $("div#flash-message-container");
	if(el.length > 0) {
		el.fadeIn(400, function() {
		    setTimeout(function() { 
		    	el.fadeOut(400, function() {});
		    }, 2000);
		});
	}
}

function eventGuestBoxes() {
	var el = $("div#guests-modal");
	if(el.length > 0) {
		var goingBox = "div#going-guests";
		var declinedBox = "div#declined-guests";
		var maybeBox = "div#maybe-guests";
		var invitedBox = "div#invited-guests";

		var guestBoxs =[ goingBox, declinedBox, maybeBox, invitedBox];

		guestBoxs.forEach(function(box) {
			var re = new RegExp(/^(.*?)\-guests/);
			$(document).on('click', box, function() {
				el.modal('toggle');
				var id = $(this).attr("id");
				var typeOfGuest = id.match(re)[1];
				getTypeOfGuests(typeOfGuest, el);
			})
		});
	}
}

function getTypeOfGuests(type, modal) {
	var re = new RegExp("events/\(.*\)");
	var loc = window.location.pathname;
	var eventId = loc.match(re)[1];
	$.get('/events/' +  eventId + '/guests/' + type)
		.success(success)
		.error(error)

	function success(data) {
		var $content = $('div#guests-modal-content');
		var body = $('div.modal-body');
		var guestsListCon = $("div#guests-list-container");
		var guestsList = $("div#guests-list");
		var img = $('img#guests-modal-loading');

		// setting all guests to the window for use in organization in menu
		window.all_guests = data.all_guests
		window.test = 1;

		modal.on('hidden.bs.modal', function () {
			guestsList.empty();
			img.css({
				display: "block"
			});
			$content.css({
				height: "80px"
			})
			guestsListCon.css({
				display: "none"
			});
		});

		setTimeout(appendGuests, 500);

		function appendGuests() {
			img.fadeOut(100, function() {
				data.specific_guests.forEach(function(guest, i) {
					// calls guestAviUrl to discern if photo is default or upload
					var aviUrl = guestAviUrl(guest.avi_url);
					guestsList.append(guestsListTemplate(aviUrl, guest.username));
				});
				if(type.length > 1) {
					toggleLabels(type);
				}
				$content.animate({
					height: "400px"
				}, 300, function() {
					guestsListCon.fadeIn(500);
				});
			});
			
		}
	}

	function error() {

	}
} // function getTypeOfGuests

function attendanceLabelListeners() {
	var $container = $("div#guests-list-container");
	if($container.length > 0) {
		// on click on an attendance label discern what guests need to be shown
		$(document).on('click', 'div.attendance-label', function() {
			// calls getAllGuests to snatch all guests attending saved into the window
			var labelType = $(this).attr("label-type");
			// empties then hides $guestsList to append guests one by one without being seen
			
			changeGuestsList(labelType);
			toggleLabels(labelType);
		});
	}
}

// ********** guestsList functions **********

function getAllGuests() {
	if(window.all_guests == undefined) {
		window.all_guests = [];
	}
	return window.all_guests;
}

function guestAviUrl(url) {
if (url == "aviplaceholder.png") {
		var aviUrl = "<%= asset_path('aviplaceholder.png')%>";
	} else {
		var aviUrl = avi_url;
	}

	return aviUrl;
}

function changeGuestsList(labelType, guests) {
	var $guestsList = $("div#guests-list");
	var guests = getAllGuests();

	$guestsList.empty();
	$guestsList.css({
		visibility: "hidden"
	});
	// goes through each guest and discerns if they will be appended
	guests.forEach(function(guest) {
		// calls guestAviUrl to discern if photo is default or upload
		var aviUrl = guestAviUrl(guest.avi_url);
		// guests are appeneded if the attendance_status is the same as labelType
		// if the labelType is "invited" then all guests are appended
		if(labelType === guest.attendance_status) {
			$guestsList.append(guestsListTemplate(aviUrl, guest.username));
		} else if(labelType === "invited") {
			$guestsList.append(guestsListTemplate(aviUrl, guest.username));
		}
	});
	// shows $guestsList once everything is appended
	$guestsList.css({
		visibility: "visible"
	});
}

function guestsListTemplate(imgUrl, guestUsername) {
	var template =
	"<div class='guest'>" + 
		"<img src='" + imgUrl + "' class='guest-img'/>" + 
		"<div class='guest-username'>" + 
			guestUsername + 
		"</div>" +
	"</div>";

	return template;
}

function buttonAttendanceLabelListener() {
	var $el = $("button[data-id=attendance-label-select]");
	
	$('body').on('DOMSubtreeModified', 'span.filter-option.pull-left', function() {
		var labelType = $(this).text() === "Attending" ? "going" : $(this).text();
		if(labelType.length > 1) {
			changeGuestsList(labelType.toLowerCase());
		}
	});
}

function toggleLabels(labelType) {
	var $labelsContainer = $("div#attendance-labels-container");
	// handling .attendance-labels
	var $prevLabel = $labelsContainer.find(".label-selected");
 	$prevLabel.removeClass('label-selected');
 	var $currentLabel = $('div[label-type=' + labelType + ']');
 	$currentLabel.addClass('label-selected');

 	var $dropdownLabel = $('span.filter-option.pull-left');
 	var label = labelType;
 	if (labelType === "going") {
 		label = "Attending";
 	}
 	var upperCaseLabel = label.charAt(0).toUpperCase() + label.slice(1);
 	$dropdownLabel.text(upperCaseLabel);
}

// ******************* guest list functions END *********************

// ********** event functions **********
	function categorySelector() {
		$category = $('#categories-container');
		if($category.length > 0) {
			if ((typeof category) !== 'undefined') {
				var categoryObj = JSON.parse(category);
				var $categoryTarget = $('.' + categoryObj.title.replace(/ /g, ''));
				$categoryTarget.addClass('selected');
				$categoryTarget.prepend('<i class="fa fa-chevron-right" aria-hidden="true"></i>');
			}
		}
	}

	function itemSelector() {
		$item = $('#items-container');
		if($item.length > 0) {
			if ((typeof item) !== 'undefined') {
				var itemObj = JSON.parse(item);
				var $itemTarget = $('.' + itemObj.title.replace(/ /g, ''));
				$itemTarget.addClass('selected');
				$itemTarget.prepend('<i class="fa fa-chevron-right" aria-hidden="true"></i>');
			}
		}
	}
// ******************* event functions END *********************

// ********** notification functions **********
	function notificationBoxAction() {
		$action = $('.notification-action');
		$actionDDown = $('div.dropdown-menu.options a.dropdown-item');
		if($action.length > 0) {
			$action.click(function() {
				var $noti = $(this);
				notification_action($noti);
			});
			$actionDDown.click(function() {
				var $noti = $(this);
				notification_action($noti);
			});
		}
	}

	function notification_action($notiEle) {
		var id = $notiEle.data('notification-id');
		var kind = $notiEle.data('notification-kind');
		var action = $notiEle.data('notification-action').toLowerCase();
		var friendshipId = $notiEle.data('friendship-id');
		var eventId = $notiEle.data('event-id');
		var attendingEventId = $notiEle.data('attending-event-id');
		if(kind === "friend_request") {
			friendRequestResponse(friendshipId, id, action);
		} else if(kind === "invitation_request") {
			invitationRequestResponse(attendingEventId, id, action);
		}
	}

	function friendRequestResponse(friendshipId, notificationId, action) {
		var url = "/friendships/" + friendshipId + "/friend_" + action;
		$.ajax({
			url: url,
			method: 'patch',
			data: {notification_id: notificationId},
			dataType: 'json',
			success: success
		});

		function success(res) {
			location.reload();
		}
	}

	function invitationRequestResponse(attendingEventId, notificationId, action) {
		var url = "/attending_events/" + attendingEventId + "/" + action;
		$.ajax({
			url: url,
			method: 'patch',
			data: {notification_id: notificationId},
			dataType: 'json',
			success: success
		});

		function success(res) {
			location.reload();
		}
	}

	function dismissListener() {
		$dismissMarked = $('button.dismiss-marked');
		$dismissAll = $('a.dismiss-all');
		if($dismissMarked.length > 0) {
			$dismissMarked.click(function() {
				var notificationIds = getCheckedNotificationIds();
				if(notificationIds.length > 0) {
					dismissNotifications(notificationIds);
				}
			});
		}
		if($dismissAll.length > 0) {
			$dismissAll.click(function(e) {
				e.preventDefault();
				var notificationIds = getAllNotificationIds();
				dismissNotifications(notificationIds);
			});
		}
	}

	function getCheckedNotificationIds() {
		$input = $('input.notification-checkbox');
		if($input.length > 0) {
			var checked = [];
			$input.each(function() {
				$checkbox = $(this);
				var isChecked = $checkbox.prop('checked');
				if (isChecked) {
					checked.push($checkbox.val());
				}
			});
			return checked;
		}
	}

	function getAllNotificationIds() {
		$input = $('input.notification-checkbox');
		var notificationIds = [];
		$input.each(function() {
			$checkbox = $(this);
			notificationIds.push($checkbox.val());
		});
		return notificationIds;
	}

	function dismissNotifications(checkedNotifications) {
		var url = "/notifications/dismiss";
		$.ajax({
			url: url,
			method: 'patch',
			data: {checkedNotifications: checkedNotifications},
			dataType: 'json',
			success: success
		});

		function success() {
			location.reload();
		}
	}
// ******************* notification functions END *********************

// ********** invite guests functions **********

	function inviteButtonListener() {
		var $inviteButton = $('button#invite-guests')
		if($inviteButton.length > 0) {
			var $modal = $('div#invite-modal');
			$inviteButton.click(function(e) {
				$modal.modal('toggle');
				inviteGetFriends();
			})
		}
	}

	function inviteGetFriends() {
		var eventId = location.pathname.split("/events/")[1];
		var url = "/friends/invite/events/" + eventId;
		$.ajax({
			url: url,
			method: 'get',
			dataType: 'json',
			success: success
		});

		function success(res) {
			var friends = res.data.friends;
			window.friendsToInvite = friends;
			setTimeout(function() {
				renderInviteFriends(friends)
			}, 500);
			inviteSearchFriendsListener(friends);
			var $modal = $('div#invite-modal');
			emptyInviteFriendsListListener($modal);
		}
	}

	function inviteFriendsTemplate(friend) {
		var aviUrl = guestAviUrl(friend.avi_url);
		var template =
			"<div class='guest invite'>" + 
				"<div class='guest-overlay'></div>" +
				"<img src='" + aviUrl + "' class='guest-img'/>" +
				"<input type='checkbox' class='invite-checkbox'" + 
					"value='" + friend.id + "'" + 
					"data-username='" + friend.username + "'" + 
					"/>" + 
				"<div class='guest-username'>" + 
					friend.username + 
				"</div>" +
			"</div>";

		return template;
	}

	function renderInviteFriends(friends) {
		var $loadingGif = $('img#invite-modal-loading');
		var $inviteFriendsList = $('div#invite-friends-list');
		var $content = $('div#invite-modal-content');
		var $inviteListCon = $('div#invite-list-container');
		var $modal = $("div#invite-modal");
		friends.forEach(function(friend) {
			$inviteFriendsList.append(inviteFriendsTemplate(friend));
		});
		$loadingGif.fadeOut(100, function() {
			$content.animate({
				height: "400px"
			}, 300, function() {
				$inviteListCon.fadeIn(500);
			});
		});
	}

	function emptyInviteFriendsListListener($modal) {
		$modal.on('hidden.bs.modal', function () {
			var $inviteFriendsList = $("div#invite-friends-list");
			var $img = $('img#invite-modal-loading');
			var $inviteListCon = $('div#invite-list-container');
			var $content = $('div#invite-modal-content');

			$inviteFriendsList.empty();
			$img.css({
				display: "block"
			});
			$content.css({
				height: "100px"
			})
			$inviteListCon.css({
				display: "none"
			});
		});
	}

	function reCheckInvitedFriends(friend) {
		console.log(friend);
	}

	function inviteCheckboxListener() {
		var invitedFriends = [];
		var $inviteListCon = $('div#invite-list-container');
		var $modal = $("div#invite-modal");
		if($inviteListCon.length > 0) {
			$(document).on('change', 'input.invite-checkbox', function() {
				var $checkBox = $(this);
				var isChecked = $checkBox.is(':checked');
				var friendUsername = $checkBox.data('username');
				var friendId = $checkBox.val();
				if(isChecked) {
					invitedFriends = addFriendToInvited(friendId, friendUsername, invitedFriends);
					appendFriendToList(friendId, friendUsername);
				} else if(isChecked === false) {
					invitedFriends = removeFriendFromInvited(friendId, friendUsername, invitedFriends);
					removeFriendFromList(friendId, friendUsername);
				}
				adjustListCount(invitedFriends);
			});
		}

		$modal.on('hidden.bs.modal', function () {
			invitedFriends = [];
			$liSelected = $('li.selected');
			$liSelected.each(function() {
				$(this).remove();
			});
			adjustListCount(invitedFriends);
		});
	}

	function guestCheckboxListener() {
		$inviteListCon = $("div#invite-list-container");
		if($inviteListCon.length > 0) {
			$(document).on('click', 'div.guest.invite div.guest-overlay', function() {
				$guestOverlay = $(this);
				$checkBox = $guestOverlay.siblings('input.invite-checkbox');
				var isChecked = $checkBox.is(':checked');
				$checkBox.click();
			});
		}
	}

	function addFriendToInvited(friendId, friendUsername, invitedFriends) {
		friend = {
			friendId: friendId,
			friendUsername: friendUsername
		};
		invitedFriends.push(friend);
		window.invitedFriends = invitedFriends;
		return invitedFriends;
	}

	function removeFriendFromInvited(friendId, friendUsername, invitedFriends) {
		invitedFriends = $.grep(invitedFriends, function(e){ 
		     return ((e.friendId !== friendId) && (e.friendUsername !== friendUsername));
		});
		window.invitedFriends = invitedFriends;
		return invitedFriends;
	}

	function appendFriendToList(friendId, friendUsername) {
		var $selectedList = $('div#selected-list ul');
		var template = "<li class='selected' data-friend-id='" + friendId + "'" + 
		"data-friend-username='" + friendUsername +  "'>" + 
		friendUsername + 
		"<i class='fa fa-times-circle remove-friend' aria-hidden='true'></i>" +
		"</li>";
		$selectedList.append(template);
	}

	function removeFriendFromList(friendId, friendUsername) {
		var $target = $("li[data-friend-id='" + friendId +"'][data-friend-username='" + friendUsername +"']");
		$target.remove();
	}

	function adjustListCount(invitedFriends) {
		var $listCount = $('span.list-count');
		var count = invitedFriends.length;
		$listCount.text(count);
	}

	function removeFromListIconListener() {
		$inviteListCon = $("div#invite-list-container");
		if($inviteListCon.length > 0) {
			$(document).on('click', 'i.remove-friend', function() {
				var $listedFriend = $(this).parent();
				var friendId = $listedFriend.data('friend-id');
				var friendUsername = $listedFriend.data('friend-username');
				var $targetCheckbox = $("input[type=checkbox][value=" + friendId + "][data-username=" + friendUsername + "]");
				// instead of coding logic to remove this li and then uncheck the target checkbox
				// simply clicking the target checkbox would have the same effect
				$targetCheckbox.click();
			});
		}
	}

	function searchBorderListener() {
		$inviteListCon = $("div#invite-list-container");
		if($inviteListCon.length > 0) {
			var $searchBox = $('input#search-box');
			var $matchedFriendsList = $("div#matched-friends-list");

			$searchBox.on('focus', function() {
				var $searchFriendsCon =  $(this).parent();
				$searchFriendsCon.css({"border": ".5px solid #4095F8"});
				if($searchBox.val().length > 0) {
					var friends = window.friendsToInvite;
					var query = $searchBox.val();
					var matchedFriends = sortMatchedFriends(query, friends);
					renderMatchedFriends(matchedFriends);
				}
			});
			$searchBox.on('focusout', function() {
				var hoveringResults = $('div#matched-friends-list').is(":hover");
				if(hoveringResults === false) {
					unrenderMatchedFriendsList();
				}
			});
		}
	}

	function inviteSearchFriendsListener(friendsArray) {
		var friends = friendsArray;
		var $matchedFriendsList = $("div#matched-friends-list");
		$("input#search-box").on('keyup paste', function() {
			$input = $(this);
			var value = $input.val();
			var matchedFriends = sortMatchedFriends(value, friendsArray);

			if(value.length > 0) {
				renderMatchedFriends(matchedFriends);
				$matchedFriendsList.css({
					"display": "block"
				});
			} else {
				$matchedFriendsList.css({
					"display": "none"
				});
			}
		});
	}

	function sortMatchedFriends(query, friendsArray) {
		var regex = new RegExp('^' + query, 'i');
		matchedFriends = $.grep(friendsArray, function(e){ 
		     return regex.test(e.username)
		});
		return matchedFriends;
	}

	function renderMatchedFriends(matchedFriends) {
		var $matchedFriendsList = $("div#matched-friends-list");

		$matchedFriendsList.css({
			"display": "none"
		});

		$matchedFriendsList.empty();
		matchedFriends.forEach(function(friend) {
			var aviUrl = guestAviUrl(friend.avi_url);
			var template = 
				"<div class='searched-friend clearfixs'" + "data-friend-id='" + friend.id + "'" +"data-friend-username='" + friend.username + "'>" +
					"<img class='searched-avi' src='" + aviUrl + "'/>" + 
					"<div class='searched-info'>" + 
						"<span class='searched-username'>" + 
							friend.username +
						"</span>" + 
						"<span class='searched-from'>" + 
							friend.from +
						"</span>" + 
					"</div>" +
				"</div>";
			$matchedFriendsList.append(template);
		});
		$matchedFriendsList.css({
			"display": "block"
		});
	}

	function emptyMatchedFriendsList() {
		$matchedFriendsList = $("div#matched-friends-list");
		$matchedFriendsList.empty();
	}

	function searchedFriendClickListener() {
		var $inviteListCon = $("div#invite-list-container");
		if($inviteListCon.length > 0) {
			var $searchBox = $("input#search-box");
			$(document).on('click', 'div.searched-friend', function() {
				var $friend = $(this);
				var friendId = $friend.data('friend-id');
				var friendUsername = $friend.data('friend-username');

				var $targetCheckbox = $("input.invite-checkbox:input[value='" + friendId + "'][data-username='" + friendUsername +"']");
				$targetCheckbox.click();
				unrenderMatchedFriendsList();
			});
		}
	}

	function unrenderMatchedFriendsList() {
		var $searchFriendsCon = $("div#search-friends-container");
		var $matchedFriendsList = $("div#matched-friends-list");
		$searchFriendsCon.css({"border": ".5px solid silver"});

		$matchedFriendsList.css({
			"display": "none"
		});
		emptyMatchedFriendsList();
	}

	function submitInvites() {
		$inviteButton = $("button#invite-submit");
		if($inviteButton.length > 0) {
			$inviteButton.click(function() {
				var invitedFriends = window.invitedFriends;
				if((invitedFriends != undefined) && (invitedFriends.length > 0)) {
					var data = {invitedGuests: invitedFriends};
					var eventId = $("input#event-id").val();
					$.ajax({
						type: "POST",
						url: "/events/" + eventId + "/guests/invite",
						dataType: 'json',
						contentType: 'application/json',
						data: JSON.stringify(data),
						success: success,
						error: error
					})
				}
			})
		}
		function success() {
			window.location.reload();
		}
		function error() {
			// window.location.reload();	
		}
	}


// ******************* invite guests functions END *********************